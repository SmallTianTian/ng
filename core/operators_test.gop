package core_test

import (
	"reflect"
	"testing"

	"github.com/numgoplus/ng/core"
	dtype "github.com/numgoplus/ng/core/dtype"
)

func TestNdarray_OP_Add(t *testing.T) {
	type args struct {
		Shape []int
		Data  []dtype.Interface
	}
	tests := []struct {
		name  string
		one   args
		two   args
		want  *core.Ndarray
		panic bool
	}{
		{
			name: "int",
			one: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3]],
			},
			two: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [3, 2, 1]],
			},
			want: &core.Ndarray{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [4, 4, 4]],
			},
		},
		{
			name: "float64",
			one: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [1., 2., 3.]],
			},
			two: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [3., 2., 1.]],
			},
			want: &core.Ndarray{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [4., 4., 4.]],
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				i := recover()
				if tt.panic && i == nil {
					t.Error("need panic")
				} else if !tt.panic && i != nil {
					t.Error(i)
				}
			}()

			x := &core.Ndarray{
				Shape: tt.one.Shape,
				Data:  tt.one.Data,
			}
			y := &core.Ndarray{
				Shape: tt.two.Shape,
				Data:  tt.two.Data,
			}
			if got := x + y; !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Ndarray.OP_Add() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNdarray_OP_Sub(t *testing.T) {
	type args struct {
		Shape []int
		Data  []dtype.Interface
	}
	tests := []struct {
		name  string
		one   args
		two   args
		want  *core.Ndarray
		panic bool
	}{
		{
			name: "int",
			one: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3]],
			},
			two: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [3, 2, 1]],
			},
			want: &core.Ndarray{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [-2, 0, 2]],
			},
		},
		{
			name: "float64",
			one: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [1., 2., 3.]],
			},
			two: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [3., 2., 1.]],
			},
			want: &core.Ndarray{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [-2., 0., 2.]],
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				i := recover()
				if tt.panic && i == nil {
					t.Error("need panic")
				} else if !tt.panic && i != nil {
					t.Error(i)
				}
			}()

			x := &core.Ndarray{
				Shape: tt.one.Shape,
				Data:  tt.one.Data,
			}
			y := &core.Ndarray{
				Shape: tt.two.Shape,
				Data:  tt.two.Data,
			}
			if got := x - y; !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Ndarray.OP_Sub() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNdarray_OP_Mul(t *testing.T) {
	type args struct {
		Shape []int
		Data  []dtype.Interface
	}
	tests := []struct {
		name  string
		one   args
		two   args
		want  *core.Ndarray
		panic bool
	}{
		{
			name: "int",
			one: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3]],
			},
			two: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [3, 2, 1]],
			},
			want: &core.Ndarray{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [3, 4, 3]],
			},
		},
		{
			name: "float64",
			one: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [1., 2., 3.]],
			},
			two: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [3., 2., 1.]],
			},
			want: &core.Ndarray{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [3., 4., 3.]],
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				i := recover()
				if tt.panic && i == nil {
					t.Error("need panic")
				} else if !tt.panic && i != nil {
					t.Error(i)
				}
			}()

			x := &core.Ndarray{
				Shape: tt.one.Shape,
				Data:  tt.one.Data,
			}
			y := &core.Ndarray{
				Shape: tt.two.Shape,
				Data:  tt.two.Data,
			}
			if got := x * y; !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Ndarray.OP_Mul() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNdarray_OP_Quo(t *testing.T) {
	type args struct {
		Shape []int
		Data  []dtype.Interface
	}
	tests := []struct {
		name  string
		one   args
		two   args
		want  *core.Ndarray
		panic bool
	}{
		{
			name: "int",
			one: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3]],
			},
			two: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [3, 2, 1]],
			},
			want: &core.Ndarray{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [0, 1, 3]],
			},
		},
		{
			name: "float64",
			one: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [1., 2., 3.]],
			},
			two: args{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [3., 2., 1.]],
			},
			want: &core.Ndarray{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [1./3., 1., 3.]],
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				i := recover()
				if tt.panic && i == nil {
					t.Error("need panic")
				} else if !tt.panic && i != nil {
					t.Error(i)
				}
			}()

			x := &core.Ndarray{
				Shape: tt.one.Shape,
				Data:  tt.one.Data,
			}
			y := &core.Ndarray{
				Shape: tt.two.Shape,
				Data:  tt.two.Data,
			}
			if got := x / y; !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Ndarray.OP_Quo() = %v, want %v", got, tt.want)
			}
		})
	}
}
