package dtype

import (
	"fmt"
	"math"
)

type Float64Impl struct {
	f float64
}

func NewFloat64(f float64) *Float64Impl {
	return &Float64Impl{f}
}

func (f *Float64Impl) Type() Type {
	return Float64
}

func (f *Float64Impl) String() string {
	return fmt.Sprintf("%f", f.f)
}

func (f *Float64Impl) Itemsize() uint8 {
	return f.Type().Itemsize()
}

func (f *Float64Impl) + (o *Float64Impl) *Float64Impl {
	return &Float64Impl{f.f + o.f}
}

func (f *Float64Impl) - (o *Float64Impl) *Float64Impl {
	return &Float64Impl{f.f - o.f}
}

func (f *Float64Impl) * (o *Float64Impl) *Float64Impl {
	return &Float64Impl{f.f * o.f}
}

func (f *Float64Impl) / (o *Float64Impl) *Float64Impl {
	return &Float64Impl{f.f / o.f}
}

func (f *Float64Impl) % (o *Float64Impl) *Float64Impl {
	return &Float64Impl{math.Mod(f.f, o.f)}
}

func (f *Float64Impl) | (o *Float64Impl) *Float64Impl {
	panic("ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
}

func (f *Float64Impl) ^ (o *Float64Impl) *Float64Impl {
	panic("TypeError: ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''")
}
