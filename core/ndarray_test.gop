package core_test

import (
	"reflect"
	"testing"

	"github.com/numgoplus/ng/core"
	dtype "github.com/numgoplus/ng/core/dtype"
)

func TestNdarray_Reshape(t *testing.T) {
	type fields struct {
		Shape []int
		Data  []dtype.Interface
	}
	type args struct {
		i  int
		is []int
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *core.Ndarray
		panic  bool
	}{
		{
			name: "normal",
			fields: fields{
				Shape: [6],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3, 4, 5, 6]],
			},
			args: args{
				i:  2,
				is: [3],
			},
			want: &core.Ndarray{
				Shape: [2, 3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3, 4, 5, 6]],
			},
		},
		{
			name: "more ndim",
			fields: fields{
				Shape: [6],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3, 4, 5, 6, 7, 8]],
			},
			args: args{
				i:  2,
				is: [2, 2],
			},
			want: &core.Ndarray{
				Shape: [2, 2, 2],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3, 4, 5, 6, 7, 8]],
			},
		},
		{
			name: "bad: len not match",
			fields: fields{
				Shape: [6],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3, 4, 5, 6, 7, 8]],
			},
			args: args{
				i:  2,
				is: [3],
			},
			panic: true,
		},
		{
			name: "bad: args have zero",
			fields: fields{
				Shape: [6],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3, 4, 5, 6]],
			},
			args: args{
				i:  2,
				is: [0, 3],
			},
			panic: true,
		},
		{
			name: "bad: args have negative",
			fields: fields{
				Shape: [6],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3, 4, 5, 6]],
			},
			args: args{
				i:  2,
				is: [-1, -3],
			},
			panic: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				i := recover()
				if tt.panic && i == nil {
					t.Error("need panic")
				} else if !tt.panic && i != nil {
					t.Error(i)
				}
			}()

			n := &core.Ndarray{
				Shape: tt.fields.Shape,
				Data:  tt.fields.Data,
			}
			if got := n.Reshape(tt.args.i, tt.args.is...); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Ndarray.Reshape() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNdarray_String(t *testing.T) {
	type fields struct {
		Shape []int
		Data  []dtype.Interface
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		{
			name: "bool string",
			fields: fields{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewBool(i)) for i <- [true, false, false]],
			},
			want: `[true, false, false]`,
		},
		{
			name: "float64 string",
			fields: fields{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewFloat64(i)) for i <- [1.2, 3.4, 5.]],
			},
			want: `[1.200000, 3.400000, 5.000000]`,
		},
		{
			name: "int string",
			fields: fields{
				Shape: [3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3]],
			},
			want: `[1, 2, 3]`,
		},
		{
			name: "two ndim",
			fields: fields{
				Shape: [2, 3],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3, 4, 5, 6]],
			},
			want: `[[1, 2, 3],
[4, 5, 6]]`,
		},
		{
			name: "more ndim",
			fields: fields{
				Shape: [2, 2, 2],
				Data:  [dtype.Interface(dtype.NewInt(i)) for i <- [1, 2, 3, 4, 5, 6, 7, 8]],
			},
			want: `[[[1, 2],
[3, 4]],

[[5, 6],
[7, 8]]]`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			n := &core.Ndarray{
				Shape: tt.fields.Shape,
				Data:  tt.fields.Data,
			}
			if got := n.String(); got != tt.want {
				t.Errorf("Ndarray.String() = %v, want %v", got, tt.want)
			}
		})
	}
}
